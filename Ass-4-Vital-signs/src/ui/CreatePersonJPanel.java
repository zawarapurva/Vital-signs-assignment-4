/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author apurvazawar
 */
public class CreatePersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePersonJPanel
     */
    
    PersonDirectory personDirectory;
    PatientDirectory patientDirectory;
    int row, column;
    DefaultTableModel defaultTableModel;
    
    
    public CreatePersonJPanel(PersonDirectory personDirectory, PatientDirectory patientDirectory) {
        initComponents();
        this.personDirectory = personDirectory;
        this.patientDirectory = patientDirectory;
        //Comment this
//        Person person1 = personDirectory.addNewPersonDetails();
//        person1.setPersonName("Apurva");
//        person1.setPersonAge(22);
//        person1.setGender("Female");
//        person1.setContactNumber(1234567890);
//        person1.setHouseAddress("ParkerSt");
//        person1.setCommunityName("Roxbury");
//        person1.setCityName("Boston");
//        
//        Person person2 = personDirectory.addNewPersonDetails();
//        person2.setPersonName("Pooja");
//        person2.setPersonAge(33);
//        person2.setGender("Female");
//        person2.setContactNumber(1234567893);
//        person2.setHouseAddress("ParkerHill");
//        person2.setCommunityName("Allston");
//        person2.setCityName("NewYork");
//        
//        addPatient(person1);
//        addPatient(person2);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupGender = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblCity = new javax.swing.JLabel();
        lblPersonName = new javax.swing.JLabel();
        txtPersonName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtPersonAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        comboBoxCity = new javax.swing.JComboBox<>();
        jRadioButtonMale = new javax.swing.JRadioButton();
        jRadioButtonFemale = new javax.swing.JRadioButton();
        jRadioButtonOthers = new javax.swing.JRadioButton();
        lblCommunity = new javax.swing.JLabel();
        comboBoxCommunity = new javax.swing.JComboBox<>();
        lblResidence = new javax.swing.JLabel();
        txtResidence = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        lblContactNumber = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePersonDirectory = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 102, 153));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setForeground(new java.awt.Color(0, 255, 255));
        jPanel2.setToolTipText("");

        lblCity.setBackground(new java.awt.Color(0, 102, 153));
        lblCity.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblCity.setForeground(new java.awt.Color(255, 255, 255));
        lblCity.setText("Select City");

        lblPersonName.setBackground(new java.awt.Color(0, 102, 153));
        lblPersonName.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblPersonName.setForeground(new java.awt.Color(255, 255, 255));
        lblPersonName.setText("Name");
        lblPersonName.setPreferredSize(new java.awt.Dimension(60, 15));

        txtPersonName.setBorder(null);

        lblAge.setBackground(new java.awt.Color(0, 102, 153));
        lblAge.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblAge.setForeground(new java.awt.Color(255, 255, 255));
        lblAge.setText("Age");

        txtPersonAge.setBorder(null);
        txtPersonAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonAgeActionPerformed(evt);
            }
        });

        lblGender.setBackground(new java.awt.Color(0, 102, 153));
        lblGender.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblGender.setForeground(new java.awt.Color(255, 255, 255));
        lblGender.setText("Gender");
        lblGender.setPreferredSize(new java.awt.Dimension(60, 15));

        comboBoxCity.setMaximumRowCount(4);
        comboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "NewYork", "Worcester", "Springfield", "Cambridge", "Lowell", " " }));
        comboBoxCity.setSelectedIndex(-1);
        comboBoxCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCityActionPerformed(evt);
            }
        });

        jRadioButtonMale.setBackground(new java.awt.Color(0, 102, 153));
        btnGroupGender.add(jRadioButtonMale);
        jRadioButtonMale.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonMale.setText("Male");
        jRadioButtonMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMaleActionPerformed(evt);
            }
        });

        jRadioButtonFemale.setBackground(new java.awt.Color(0, 102, 153));
        btnGroupGender.add(jRadioButtonFemale);
        jRadioButtonFemale.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonFemale.setText("Female");

        jRadioButtonOthers.setBackground(new java.awt.Color(0, 102, 153));
        btnGroupGender.add(jRadioButtonOthers);
        jRadioButtonOthers.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonOthers.setText("Others");

        lblCommunity.setBackground(new java.awt.Color(0, 255, 255));
        lblCommunity.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblCommunity.setForeground(new java.awt.Color(255, 255, 255));
        lblCommunity.setText("Select Community");

        comboBoxCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Allston", "Back Bay", "Mission Hill", "Roxbury" }));
        comboBoxCommunity.setSelectedIndex(-1);
        comboBoxCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCommunityActionPerformed(evt);
            }
        });

        lblResidence.setBackground(new java.awt.Color(0, 102, 153));
        lblResidence.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblResidence.setForeground(new java.awt.Color(255, 255, 255));
        lblResidence.setText("Residence");

        txtResidence.setBorder(null);

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save-icon.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setSize(new java.awt.Dimension(20, 10));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblContactNumber.setBackground(new java.awt.Color(0, 102, 153));
        lblContactNumber.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        lblContactNumber.setForeground(new java.awt.Color(255, 255, 255));
        lblContactNumber.setText("Contact Number");

        txtContactNumber.setBorder(null);

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete-icon.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit-validated-icon.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonMale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonFemale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonOthers))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(btnAdd)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate)
                            .addGap(219, 219, 219)
                            .addComponent(btnDelete))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPersonAge, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lblContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(66, 66, 66)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboBoxCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboBoxCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lblResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCity)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCommunity)
                            .addComponent(txtPersonAge, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblAge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtResidence, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblResidence)
                        .addComponent(lblContactNumber))
                    .addComponent(txtContactNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonMale)
                    .addComponent(jRadioButtonFemale)
                    .addComponent(jRadioButtonOthers))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Create Person Profile");

        jTablePersonDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Gender", "Contact Number", "Residence", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePersonDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePersonDirectoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePersonDirectory);
        if (jTablePersonDirectory.getColumnModel().getColumnCount() > 0) {
            jTablePersonDirectory.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addComponent(jLabel1)
                .addContainerGap(426, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCityActionPerformed

    private void jRadioButtonMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMaleActionPerformed

    private void comboBoxCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCommunityActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        for(Person person : personDirectory.getPersonDirectoryArrayList()){
            if(txtContactNumber.getText().equalsIgnoreCase(String.valueOf(person.getContactNumber()))){
                JOptionPane.showMessageDialog(this, "Duplicate Contact Number Found! Contact Number must be Unique!");
                return;
            }
        }

        String personName=txtPersonName.getText();
        if (personName== null || !personName.matches("^[a-zA-Z ]{1,25}$")) {
            JOptionPane.showMessageDialog(this, "Invalid Person Name");
            return;
        } else{
            personName = txtPersonName.getText();
        }

        int age= Integer.parseInt(txtPersonAge.getText());
        String ageString = String.valueOf(age);
        String patterninput = "^[0-9]{1,2}$";
        Pattern pattern = Pattern.compile(patterninput);
        Matcher matchAge = pattern.matcher(ageString);

        if (ageString== null || ageString.trim().isEmpty()|| !matchAge.matches()) {
            JOptionPane.showMessageDialog(this, "Invalid Age ");
            return;
        } else{
            ageString = txtPersonAge.getText();
        }
        String gender="";
        if((jRadioButtonMale.isSelected()==false)&&(jRadioButtonFemale.isSelected()==false)&&(jRadioButtonOthers.isSelected()==false)){
            JOptionPane.showMessageDialog(null,"Please select radio button");

        } else {
            if (jRadioButtonMale.isSelected()) {
                gender="Male";
            }else if(jRadioButtonFemale.isSelected()){
                gender="Female";
            }else{
                gender="Other";
            }}

            long contactNumber= Long.parseLong(txtContactNumber.getText());
            String s = String.valueOf(contactNumber);
            String patterninput1 = "^[0-9]{10}$";
            Pattern pattern1 = Pattern.compile(patterninput1);
            Matcher match = pattern1.matcher(s);

            if (s== null || s.trim().isEmpty()|| !match.matches()) {
                JOptionPane.showMessageDialog(this, "Invalid Contact Number");
                return;
            } else{
                s = txtContactNumber.getText();
            }
            String cityName="";
            if (comboBoxCity.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(this, "Select City");
                return;
            } else{
                cityName = comboBoxCity.getSelectedItem().toString();
            }
            String CommunityName="";
            if (comboBoxCommunity.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(this, "Select Community");
                return;
            } else{
                CommunityName = comboBoxCommunity.getSelectedItem().toString();
            }

            String houseAddress= txtResidence.getText();
            if (houseAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Residence can't be Empty");
                return;
            } else{
                houseAddress = txtResidence.getText();
            }

            Person person = personDirectory.addNewPersonDetails();
            person.setPersonName(personName);
            person.setPersonAge(age);
            person.setGender(gender);
            person.setContactNumber(contactNumber);
            person.setHouseAddress(houseAddress);
            person.setCommunityName(CommunityName);
            person.setCityName(cityName);

            JOptionPane.showMessageDialog(this, "New Person Details Added");
            addPatient(person);
            clearField();
            populateTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtPersonAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPersonAgeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex =jTablePersonDirectory.getSelectedRow();
        
        defaultTableModel = (DefaultTableModel)jTablePersonDirectory.getModel();
        int col = 0;
        String value = defaultTableModel.getValueAt(selectedRowIndex, col).toString();
        int getPersonId = Integer.parseInt(value);
        deletePatient(getPersonId);
        
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select a row to delete.");
            return;
        }
        
        personDirectory.deletePersonDetails(selectedRowIndex);
        JOptionPane.showMessageDialog(this,"Person details deleted..");
        populateTable();
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex =jTablePersonDirectory.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select a row to update.");
            return;
        }

        String personName=txtPersonName.getText();
        if (personName== null || !personName.matches("^[a-zA-Z ]{1,25}$")) {
            JOptionPane.showMessageDialog(this, "Invalid Person Name");
            return;
        } else{
            personName = txtPersonName.getText();
        }

        int age= Integer.parseInt(txtPersonAge.getText());
        String ageString = String.valueOf(age);
        String patterninput = "^[0-9]{1,2}$";
        Pattern pattern = Pattern.compile(patterninput);
        Matcher matchAge = pattern.matcher(ageString);

        if (ageString== null || ageString.trim().isEmpty()|| !matchAge.matches()) {
            JOptionPane.showMessageDialog(this, "Invalid Age ");
            return;
        } else{
            ageString = txtPersonAge.getText();
        }
        String gender="";
        if((jRadioButtonMale.isSelected()==false)&&(jRadioButtonFemale.isSelected()==false)&&(jRadioButtonOthers.isSelected()==false)){
            JOptionPane.showMessageDialog(null,"Please select radio button");

        } else {
            if (jRadioButtonMale.isSelected()) {
                gender="Male";
            }else if(jRadioButtonFemale.isSelected()){
                gender="Female";
            }else{
                gender="Other";
            }}

            long contactNumber= Long.parseLong(txtContactNumber.getText());
            String s = String.valueOf(contactNumber);
            String patterninput1 = "^[0-9]{10}$";
            Pattern pattern1 = Pattern.compile(patterninput1);
            Matcher match = pattern1.matcher(s);

            if (s== null || s.trim().isEmpty()|| !match.matches()) {
                JOptionPane.showMessageDialog(this, "Invalid Contact Number");
                return;
            } else{
                s = txtContactNumber.getText();
            }
            String cityName="";
            if (comboBoxCity.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(this, "Select City");
                return;
            } else{
                cityName = comboBoxCity.getSelectedItem().toString();
            }
            String CommunityName="";
            if (comboBoxCommunity.getSelectedIndex()==-1) {
                JOptionPane.showMessageDialog(this, "Select Community");
                return;
            } else{
                CommunityName = comboBoxCommunity.getSelectedItem().toString();
            }

            String houseAddress= txtResidence.getText();
            if (houseAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Residence can't be Empty");
                return;
            } else{
                houseAddress = txtResidence.getText();
            }
            Person person = new Person();
            person.setPersonName(personName);
            person.setPersonAge(age);
            person.setGender(gender);
            person.setContactNumber(contactNumber);
            person.setHouseAddress(houseAddress);
            person.setCommunityName(CommunityName);
            person.setCityName(cityName);
            personDirectory.updatePersonDetails(selectedRowIndex, person);
            JOptionPane.showMessageDialog(this,"Person details updated..");
            populateTable();
            updatePatient(person);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jTablePersonDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePersonDirectoryMouseClicked
        // TODO add your handling code here:

        row= jTablePersonDirectory.getSelectedRow();
        column=jTablePersonDirectory.getSelectedColumn();
        txtPersonName.setText(defaultTableModel.getValueAt(row, 1).toString());
        txtPersonAge.setText(defaultTableModel.getValueAt(row, 2).toString());

        String gender= defaultTableModel.getValueAt(row, 3).toString();
        if (gender.equals("Male")) {
            jRadioButtonMale.setSelected(true);

        } else if(gender.equals("Female")){
            jRadioButtonFemale.setSelected(true);
        }else if(gender.equals("Others")){
            jRadioButtonOthers.setSelected(true);
        }

        txtContactNumber.setText(defaultTableModel.getValueAt(row, 4).toString());
        txtResidence.setText(defaultTableModel.getValueAt(row, 5).toString());

        String communityName = defaultTableModel.getValueAt(row, 6).toString();
        for (int i = 0; i < (comboBoxCommunity.getItemCount()); i++) {
            if (comboBoxCommunity.getItemAt(i).equalsIgnoreCase(communityName)) {
                comboBoxCommunity.setSelectedIndex(i);
            }
        }
        String cityName = defaultTableModel.getValueAt(row, 7).toString();
        for (int i = 0; i < (comboBoxCity.getItemCount()); i++) {
            if (comboBoxCity.getItemAt(i).equalsIgnoreCase(cityName)) {
                comboBoxCity.setSelectedIndex(i);
            }
        }

    }//GEN-LAST:event_jTablePersonDirectoryMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.ButtonGroup btnGroupGender;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboBoxCity;
    private javax.swing.JComboBox<String> comboBoxCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonFemale;
    private javax.swing.JRadioButton jRadioButtonMale;
    private javax.swing.JRadioButton jRadioButtonOthers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePersonDirectory;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblPersonName;
    private javax.swing.JLabel lblResidence;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtPersonAge;
    private javax.swing.JTextField txtPersonName;
    private javax.swing.JTextField txtResidence;
    // End of variables declaration//GEN-END:variables

    private void clearField() {
        
        txtPersonName.setText("");
        txtPersonAge.setText("");
        txtResidence.setText("");
        txtContactNumber.setText("");
        comboBoxCity.setSelectedIndex(-1);
        comboBoxCommunity.setSelectedIndex(-1);        
    }
    
    private void populateTable() {
        defaultTableModel = (DefaultTableModel)jTablePersonDirectory.getModel();
        defaultTableModel.setRowCount(0);
        
        for(Person person : personDirectory.getPersonDirectoryArrayList()){
            Object[] row = new Object[8];
            row[0]= person.getId();
            row[1]= person;
            row[2]= person.getPersonAge();
            row[3]= person.getGender();
            row[4]= person.getContactNumber();
            row[5]= person.getHouseAddress();
            row[6]= person.getCommunityName();
            row[7]= person.getCityName();
            defaultTableModel.addRow(row); 
        }
    }
    
    private void addPatient (Person pd) {
        Patient cd = new Patient();
        cd.setPersonName(pd.getPersonName());
        cd.setPersonAge(pd.getPersonAge());
        cd.setGender(pd.getGender());
        cd.setContactNumber(pd.getContactNumber());
        cd.setHouseAddress(pd.getHouseAddress());
        cd.setCommunityName(pd.getCommunityName());
        cd.setCityName(pd.getCityName());
        cd.setpatientId(pd.getId());
        patientDirectory.addNewPatientDetails(cd);
    }
    
    private void updatePatient (Person pd) {
        Patient cd = new Patient();
        cd.setPersonName(pd.getPersonName());
        cd.setPersonAge(pd.getPersonAge());
        cd.setGender(pd.getGender());
        cd.setContactNumber(pd.getContactNumber());
        cd.setHouseAddress(pd.getHouseAddress());
        cd.setCommunityName(pd.getCommunityName());
        cd.setCityName(pd.getCityName());
        cd.setpatientId(pd.getId());
        patientDirectory.updatePatientDetails(cd);
    }
    
    private void deletePatient(int getPersonId) {
        patientDirectory.deletePatientDetails(getPersonId);
    }
}